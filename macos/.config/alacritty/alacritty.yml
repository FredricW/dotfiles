window:
  dimensions:
    columns: 100
    lines: 20
  padding:
    x: 32
    y: 32
  decorations: none

  startup_mode: Windowed

# fix curly brackets on MacOs
alt_send_esc: false

scrolling:
  # maximum number of lines in the scrollback buffer. Specifying '0' will
  # disable scrolling.
  history: 0

  # Number of lines the viewport will move for every line scrolled when
  # scrollback is enabled (history > 0).
  multiplier: 3

# Font configuration (changes require restart)
font:
  # The normal (roman) font face to use.
  # Style can be specified to pick a specific face.
  normal:
    # family: Iosevka
    # family: "Fira Code"
    # family: "Source Code Pro"
    family: "Source Code Pro for Powerline"
    # style: Retina

  # The bold font face
  bold:
    # family: Iosevka
    # family: "Fira Code"
    # family: "Source Code Pro"
    family: "Source Code Pro for Powerline"
    # family: Menlo

  # The italic font face
  italic:
    # family: Iosevka
    # family: "Fira Code"
    # family: "Source Code Pro"
    # family: Menlo
    family: "Source Code Pro for Powerline"
    # style: "Medium Italic"

  # Point size of the font
  size: 14.0

  # Offset is the extra space around each character. offset.y can be thought of
  # as modifying the linespacing, and offset.x as modifying the letter spacing.
  offset:
    x: 0
    y: 8

  # Glyph offset determines the locations of the glyphs within their cells with
  # the default being at the bottom. Increase the x offset to move the glyph to
  # the right, increase the y offset to move the glyph upward.
  glyph_offset:
    x: 0
    y: 5

  # Thin stroke font rendering (macOS only)
  #
  # Thin strokes are suitable for retina displays, but for non-retina you
  # probably want this set to false.
  #
  # macOS >= 10.14.x:
  #
  # If the font quality on non-retina display looks bad then set
  # `use_thin_strokes` to `true` and enable font smoothing by running the
  # following command:
  #   `defaults write -g CGFontRenderingFontSmoothingDisabled -bool NO`
  #
  # This is a global setting and will require a log out or restart to take
  # effect.
  use_thin_strokes: true

# When true, bold text is drawn using the bright variant of colors.
draw_bold_text_with_bright_colors: false

# Use custom cursor colors. If true, display the cursor in the cursor.foreground
#   keys. It is therefore required to update the terminfo when
#   changing an escape sequence.
#
# Values for `action`:
#   - Paste
#   - PasteSelection
#   - Copy
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#   - Hide
#   - Quit
#   - ClearLogNotice
#   - SpawnNewInstance
#   - ToggleFullscreen
#   - None
#
# Values for `action` (macOS only):
#   - ToggleSimpleFullscreen: Enters fullscreen without occupying another space
#
# Values for `command`:
#   The `command` field must be a map containing a `program` string and
#   an `args` array of command line parameter strings.
#
#   Example:
#       `command: { program: "alacritty", args: ["-e", "vttest"] }`
#
# Values for `mode`:
#   - ~AppCursor
#   - AppCursor
#   - ~AppKeypad
#   - AppKeypad
#
key_bindings:
  # - { key: V, mods: Command, action: Paste }
  # - { key: C, mods: Command, action: Copy }
  - { key: Q, mods: Command, action: Quit }
  - { key: N, mods: Command, action: SpawnNewInstance }
  - { key: Return, mods: Command, action: ToggleFullscreen }
  - { key: Space, mods: Control, chars: "\x00" } # map ctrl + space

  # - { key: Home, chars: "\x1bOH", mode: AppCursor }
  # - { key: Home, chars: "\x1b[H", mode: ~AppCursor }
  # - { key: End, chars: "\x1bOF", mode: AppCursor }
  # - { key: End, chars: "\x1b[F", mode: ~AppCursor }
  # - { key: Equals, mods: Command, action: IncreaseFontSize }
  # - { key: Minus, mods: Command, action: DecreaseFontSize }
  # - { key: Minus, mods: Command|Shift, action: ResetFontSize }
  # - { key: PageUp, mods: Shift, chars: "\x1b[5;2~" }
  # - { key: PageUp, mods: Control, chars: "\x1b[5;5~" }
  # - { key: PageUp, chars: "\x1b[5~" }
  # - { key: PageDown, mods: Shift, chars: "\x1b[6;2~" }
  # - { key: PageDown, mods: Control, chars: "\x1b[6;5~" }
  # - { key: PageDown, chars: "\x1b[6~" }
  # - { key: Left, mods: Shift, chars: "\x1b[1;2D" }
  # - { key: Left, mods: Control, chars: "\x1b[1;5D" }
  # - { key: Left, mods: Alt, chars: "\x1b[1;3D" }
  # - { key: Left, chars: "\x1b[D", mode: ~AppCursor }
  # - { key: Left, chars: "\x1bOD", mode: AppCursor }
  # - { key: Right, mods: Shift, chars: "\x1b[1;2C" }
  # - { key: Right, mods: Control, chars: "\x1b[1;5C" }
  # - { key: Right, mods: Alt, chars: "\x1b[1;3C" }
  # - { key: Right, chars: "\x1b[C", mode: ~AppCursor }
  # - { key: Right, chars: "\x1bOC", mode: AppCursor }
  # - { key: Up, mods: Shift, chars: "\x1b[1;2A" }
  # - { key: Up, mods: Control, chars: "\x1b[1;5A" }
  # - { key: Up, mods: Alt, chars: "\x1b[1;3A" }
  # - { key: Up, chars: "\x1b[A", mode: ~AppCursor }
  # - { key: Up, chars: "\x1bOA", mode: AppCursor }
  # - { key: Down, mods: Shift, chars: "\x1b[1;2B" }
  # - { key: Down, mods: Control, chars: "\x1b[1;5B" }
  # - { key: Down, mods: Alt, chars: "\x1b[1;3B" }
  # - { key: Down, chars: "\x1b[B", mode: ~AppCursor }
  # - { key: Down, chars: "\x1bOB", mode: AppCursor }
  # - { key: Tab, mods: Shift, chars: "\x1b[Z" }
  # - { key: F1, chars: "\x1bOP" }
  # - { key: F2, chars: "\x1bOQ" }
  # - { key: F3, chars: "\x1bOR" }
  # - { key: F4, chars: "\x1bOS" }
  # - { key: F5, chars: "\x1b[15~" }
  # - { key: F6, chars: "\x1b[17~" }
  # - { key: F7, chars: "\x1b[18~" }
  # - { key: F8, chars: "\x1b[19~" }
  # - { key: F9, chars: "\x1b[20~" }
  # - { key: F10, chars: "\x1b[21~" }
  # - { key: F11, chars: "\x1b[23~" }
  # - { key: F12, chars: "\x1b[24~" }
  # - { key: Back, chars: "\x7f" }
  # - { key: Back, mods: Alt, chars: "\x1b\x7f" }
  # - { key: Insert, chars: "\x1b[2~" }
  # - { key: Delete, chars: "\x1b[3~" }
  # shortcuts for tmux. the leader key is control-b (0x02)
  # - { key: W, mods: Command, chars: "\x02&" } # close tab (kill)
  # - { key: T, mods: Command, chars: "\x02c" } # new tab
  # - { key: RBracket, mods: Command|Shift, chars: "\x02n" } # select next tab
  # - { key: LBracket, mods: Command|Shift, chars: "\x02p" } # select previous tab
  # - { key: RBracket, mods: Command, chars: "\x02o" } # select next pane
  # - { key: LBracket, mods: Command, chars: "\x02;" } # select last (previously used) pane
  # - { key: F, mods: Command, chars: "\x02/" } # search (upwards) (see tmux.conf)

mouse:
  double_click: { threshold: 300 }
  triple_click: { threshold: 300 }
  hide_when_typing: true
selection:
  semantic_escape_chars: ',â”‚`|:"'' ()[]{}<>'
  save_to_clipboard: false
mouse_bindings:
  - { mouse: Middle, action: PasteSelection }

cursor:
  style: Block
  unfocused_hollow: true

live_config_reload: true
# # Shell
# #
# # You can set shell.program to the path of your favorite shell, e.g. /bin/fish.
# # Entries in shell.args are passed unmodified as arguments to the shell.
# shell:
# program: /usr/local/homebrew/bin/fish
# args:
# - --command=tmux

# debug:
# # Should display the render timer
# render_timer: false

# # Keep the log file after quitting Alacritty.
# persistent_logging: false

# Log level
#
# Values for `log_level`:
#   - None
#   - Error
#   - Warn
#   - Info
#   - Debug
#   - Trace
# log_level: None

# Print all received window events.
# print_events: false

# Record all characters and escape sequences as test data.
# ref_test: false
# vim: nospell

scrolling:
  history: 0
  multiplier: 3


# draw_bold_text_with_bright_colors: false

colors:
  primary:
    background: "0x272936"
# foreground: "0x2e2e2d"
# normal:
# black: "0x000000"
# red: "0xc62828"
# green: "0x558b2f"
# yellow: "0xf9a825"
# blue: "0x1565c0"
# magenta: "0x6a1e9a"
# cyan: "0x00838f"
# white: "0xf2f2f2"
# bright:
# black: "0x545454"
# red: "0xef5350"
# green: "0x8bc34a"
# yellow: "0xffeb3b"
# blue: "0x64b5f6"
# magenta: "0xba68c8"
# cyan: "0x26c6da"
# white: "0xe0e0e0"
# dim:
# black: "0x333333"
# red: "0xf2777a"
# green: "0x99cc99"
# yellow: "0xffcc66"
# blue: "0x6699cc"
# magenta: "0xcc99cc"
# cyan: "0x66cccc"
# white: "0xdddddd"
# indexed_colors: []
# visual_bell:
# animation: EaseOutExpo
# color: "0xffffff"
# duration: 0
background_opacity: 1.0

# Key bindings
#
# Key bindings are specified as a list of objects. Each binding will specify a
# key and modifiers required to trigger it, terminal modes where the binding is
# applicable, and what should be done when the key binding fires. It can either
# send a byte sequence to the running application (`chars`), execute a
# predefined action (`action`) or fork and execute a specified command plus
# arguments (`command`).
#
# Bindings are always filled by default, but will be replaced when a new binding
# with the same triggers is defined. To unset a default binding, it can be
# mapped to the `None` action.
#
# Example:
#   `- { key: V, mods: Control|Shift, action: Paste }`
#
# Available fields:
#   - key
#   - mods (optional)
#   - chars | action | command (exactly one required)
#   - mode (optional)
#
# Values for `key`:
#   - `A` -> `Z`
#   - `F1` -> `F12`
#   - `Key1` -> `Key0`
#
#   A full list with available key codes can be found here:
#   https://docs.rs/glutin/*/glutin/enum.VirtualKeyCode.html#variants
#
#   Instead of using the name of the keys, the `key` field also supports using
#   the scancode of the desired key. Scancodes have to be specified as a
#   decimal number.
#   This command will allow you to display the hex scancodes for certain keys:
#     `showkey --scancodes`
#
# Values for `mods`:
#   - Command
#   - Control
#   - Option
#   - Super
#   - Shift
#   - Alt
#
#   Multiple `mods` can be combined using `|` like this: `mods: Control|Shift`.
#   Whitespace and capitalization is relevant and must match the example.
#
# Values for `chars`:
#   The `chars` field writes the specified string to the terminal. This makes
#   it possible to pass escape sequences.
#   To find escape codes for bindings like `PageUp` ("\x1b[5~"), you can run
#   the command `showkey -a` outside of tmux.
#   Note that applications use terminfo to map escape sequences back to
#   keys. It is therefore required to update the terminfo when
#   changing an escape sequence.
#
# Values for `action`:
#   - Paste
#   - PasteSelection
#   - Copy
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#   - Hide
#   - Quit
#   - ClearLogNotice
#   - SpawnNewInstance
#   - ToggleFullscreen
#   - None
#
# Values for `action` (macOS only):
#   - ToggleSimpleFullscreen: Enters fullscreen without occupying another space
#
# Values for `command`:
#   The `command` field must be a map containing a `program` string and
#   an `args` array of command line parameter strings.
#
#   Example:
#       `command: { program: "alacritty", args: ["-e", "vttest"] }`
#
# Values for `mode`:
#   - ~AppCursor
#   - AppCursor
#   - ~AppKeypad
#   - AppKeypad
#
key_bindings:
  # - { key: V, mods: Command, action: Paste }
  # - { key: C, mods: Command, action: Copy }
  - { key: Q, mods: Command, action: Quit }
  - { key: N, mods: Command, action: SpawnNewInstance }
  - { key: Return, mods: Command, action: ToggleFullscreen }

  # - { key: Home, chars: "\x1bOH", mode: AppCursor }
  # - { key: Home, chars: "\x1b[H", mode: ~AppCursor }
  # - { key: End, chars: "\x1bOF", mode: AppCursor }
  # - { key: End, chars: "\x1b[F", mode: ~AppCursor }
  # - { key: Equals, mods: Command, action: IncreaseFontSize }
  # - { key: Minus, mods: Command, action: DecreaseFontSize }
  # - { key: Minus, mods: Command|Shift, action: ResetFontSize }
  # - { key: PageUp, mods: Shift, chars: "\x1b[5;2~" }
  # - { key: PageUp, mods: Control, chars: "\x1b[5;5~" }
  # - { key: PageUp, chars: "\x1b[5~" }
  # - { key: PageDown, mods: Shift, chars: "\x1b[6;2~" }
  # - { key: PageDown, mods: Control, chars: "\x1b[6;5~" }
  # - { key: PageDown, chars: "\x1b[6~" }
  # - { key: Left, mods: Shift, chars: "\x1b[1;2D" }
  # - { key: Left, mods: Control, chars: "\x1b[1;5D" }
  # - { key: Left, mods: Alt, chars: "\x1b[1;3D" }
  # - { key: Left, chars: "\x1b[D", mode: ~AppCursor }
  # - { key: Left, chars: "\x1bOD", mode: AppCursor }
  # - { key: Right, mods: Shift, chars: "\x1b[1;2C" }
  # - { key: Right, mods: Control, chars: "\x1b[1;5C" }
  # - { key: Right, mods: Alt, chars: "\x1b[1;3C" }
  # - { key: Right, chars: "\x1b[C", mode: ~AppCursor }
  # - { key: Right, chars: "\x1bOC", mode: AppCursor }
  # - { key: Up, mods: Shift, chars: "\x1b[1;2A" }
  # - { key: Up, mods: Control, chars: "\x1b[1;5A" }
  # - { key: Up, mods: Alt, chars: "\x1b[1;3A" }
  # - { key: Up, chars: "\x1b[A", mode: ~AppCursor }
  # - { key: Up, chars: "\x1bOA", mode: AppCursor }
  # - { key: Down, mods: Shift, chars: "\x1b[1;2B" }
  # - { key: Down, mods: Control, chars: "\x1b[1;5B" }
  # - { key: Down, mods: Alt, chars: "\x1b[1;3B" }

program: /usr/local/homebrew/bin/fish
args:
  - "--command=tmux"

debug:
  # Should display the render timer
  render_timer: false

  # Keep the log file after quitting Alacritty.
  persistent_logging: false

  # Log level
  #
  # Values for `log_level`:
  #   - None
  #   - Error
  #   - Warn
  #   - Info
  #   - Debug
  #   - Trace
  log_level: Off

  # Print all received window events.
  print_events: false

  # Record all characters and escape sequences as test data.
  ref_test: false
# vim: nospell
